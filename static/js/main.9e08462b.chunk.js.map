{"version":3,"sources":["shared/BoardModel.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["randomInt","min","max","Math","ceil","floor","random","BoardModel","BEGINNER","width","height","mines","internalBoard","this","purgeGrid","initGrid","placesMines","calculateFields","length","x","push","y","m","dx","nx","dy","ny","Object","freeze","App","props","state","board","generate","handleClick","bind","setState","className","onClick","grid","map","ix","key","iy","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAAA,SAASA,EAAUC,EAAaC,GAG9B,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,EAGhD,IAAMM,EAAb,WAaE,aAAoE,IAAD,yDAArBA,EAAWC,SAApCC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,MAA+B,yBAN3DF,WAM2D,OAL3DC,YAK2D,OAJ3DC,WAI2D,OAFlDC,cAA4B,GAG3CC,KAAKJ,MAAQA,EACbI,KAAKH,OAASA,EACdG,KAAKF,MAAQA,EAhBjB,uDAwBIE,KAAKC,YACLD,KAAKE,WACLF,KAAKG,cACLH,KAAKI,oBA3BT,kCA+BIJ,KAAKD,cAAcM,OAAS,IA/BhC,iCAmCI,IAAK,IAAIC,EAAI,EAAGA,EAAIN,KAAKJ,MAAOU,IAAK,CACnCN,KAAKD,cAAcQ,KAAK,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIR,KAAKH,OAAQW,IAC/BR,KAAKD,cAAcO,GAAGC,MAAM,MAtCpC,oCA4CI,IAAIE,EAAI,EACR,EAAG,CACD,IAAMH,EAAInB,EAAU,EAAGa,KAAKJ,MAAQ,GAC9BY,EAAIrB,EAAU,EAAGa,KAAKH,OAAS,IACH,IAA9BG,KAAKD,cAAcO,GAAGE,KACxBR,KAAKD,cAAcO,GAAGE,GAAK,EAC3BC,WAEKA,EAAIT,KAAKF,SApDtB,wCAwDI,IAAK,IAAIQ,EAAI,EAAGA,EAAIN,KAAKJ,MAAOU,IAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIR,KAAKH,OAAQW,IAC/B,GAAiC,IAA7BR,KAAKD,cAAcO,GAAGE,GAA1B,CAIA,IADA,IAAIV,EAAQ,EACHY,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC/B,IAAMC,EAAKL,EAAII,EACf,KAAIC,EAAK,GAAKA,GAAMX,KAAKJ,OAGzB,IAAK,IAAIgB,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC/B,IAAMC,EAAKL,EAAII,EACJ,IAAPF,GAAmB,IAAPE,IAGZC,EAAK,GAAKA,GAAMb,KAAKH,QAGU,IAA/BG,KAAKD,cAAcY,GAAIE,IACzBf,MAINE,KAAKD,cAAcO,GAAGE,GAAKV,KAhFnC,2BAoBI,OAAOE,KAAKD,kBApBhB,KAAaL,EACYC,SAAWmB,OAAOC,OAAO,CAC9CnB,MAAO,EACPC,OAAQ,EACRC,MAAO,K,IC+BIkB,E,YApCb,WAAYC,GAAa,IAAD,8BACtB,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,IAAIzB,GAC1B,EAAKwB,MAAMC,MAAMC,WAGjB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANG,E,2EAUtBtB,KAAKuB,UAAS,SAAAL,GAEZ,OADAA,EAAMC,MAAMC,WACLF,O,+BAKT,OACE,yBAAKM,UAAU,OACb,4BAAQC,QAASzB,KAAKqB,aAAtB,YACA,+BACE,+BACGrB,KAAKkB,MAAMC,MAAMO,KAAKC,KAAI,SAACrB,EAAGsB,GAAJ,OACzB,wBAAIC,IAAG,YAAOD,IACXtB,EAAEqB,KAAI,SAACnB,EAAGsB,GAAJ,OACL,wBAAID,IAAG,YAAOC,IAAOtB,iB,GA1BrBuB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9e08462b.chunk.js","sourcesContent":["function randomInt(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport class BoardModel {\n  public static readonly BEGINNER = Object.freeze({\n    width: 9,\n    height: 9,\n    mines: 10\n  });\n\n  private width: number;\n  private height: number;\n  private mines: number;\n\n  private readonly internalBoard: number[][] = [];\n\n  public constructor({ width, height, mines } = BoardModel.BEGINNER) {\n    this.width = width;\n    this.height = height;\n    this.mines = mines;\n  }\n\n  public get grid(): ReadonlyArray<ReadonlyArray<number>> {\n    return this.internalBoard;\n  }\n\n  public generate() {\n    this.purgeGrid();\n    this.initGrid();\n    this.placesMines();\n    this.calculateFields();\n  }\n\n  private purgeGrid() {\n    this.internalBoard.length = 0;\n  }\n\n  private initGrid() {\n    for (let x = 0; x < this.width; x++) {\n      this.internalBoard.push([]);\n      for (let y = 0; y < this.height; y++) {\n        this.internalBoard[x].push(-1);\n      }\n    }\n  }\n\n  private placesMines() {\n    let m = 0;\n    do {\n      const x = randomInt(0, this.width - 1);\n      const y = randomInt(0, this.height - 1);\n      if (this.internalBoard[x][y] === -1) {\n        this.internalBoard[x][y] = 9;\n        m++;\n      }\n    } while (m < this.mines);\n  }\n\n  private calculateFields() {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        if (this.internalBoard[x][y] === 9) {\n          continue;\n        }\n        let mines = 0;\n        for (let dx = -1; dx <= 1; dx++) {\n          const nx = x + dx;\n          if (nx < 0 || nx >= this.width) {\n            continue;\n          }\n          for (let dy = -1; dy <= 1; dy++) {\n            const ny = y + dy;\n            if (dx === 0 || dy === 0) {\n              continue;\n            }\n            if (ny < 0 || ny >= this.height) {\n              continue;\n            }\n            if (this.internalBoard[nx][ny] === 9) {\n              mines++;\n            }\n          }\n        }\n        this.internalBoard[x][y] = mines;\n      }\n    }\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { BoardModel } from \"./shared/BoardModel\";\n\nclass App extends React.Component<{}, { board: BoardModel }> {\n  constructor(props: any) {\n    super(props);\n    this.state = { board: new BoardModel() };\n    this.state.board.generate();\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(state => {\n      state.board.generate();\n      return state;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.handleClick}>Generate</button>\n        <table>\n          <tbody>\n            {this.state.board.grid.map((x, ix) => (\n              <tr key={`x-${ix}`}>\n                {x.map((y, iy) => (\n                  <td key={`y-${iy}`}>{y}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}